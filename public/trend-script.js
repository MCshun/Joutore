// trend-script.js

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// „Åì„Åì„Åã„Çâ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

/** ÂçòÁ¥îÁßªÂãïÂπ≥Âùá */
function avg(arr) {
  return arr.reduce((a, b) => a + b, 0) / arr.length;
}

/** EMA Ë®àÁÆó */
function ema(values, period) {
  const k = 2 / (period + 1);
  let emaPrev = values[0];
  return values.map((price, i) => {
    emaPrev = i === 0 ? price : price * k + emaPrev * (1 - k);
    return emaPrev;
  });
}

/** ‰∏ÄÁõÆÂùáË°°Ë°®ÔºãMAÔºãBBÔºãRSIÔºãMACD „ÅÆ„Çπ„Ç≥„Ç¢Ë®àÁÆó */
function trendScore(data, settings) {
  let score = 0, maxScore = 0;
  const len = data.length;
  const closes = data.map(d => d.close);

  // ‚Äî‚Äî‚Äî MA „ÅÆ„Ç¥„Éº„É´„Éá„É≥„ÇØ„É≠„Çπ„Éª„Éá„ÉÉ„Éâ„ÇØ„É≠„Çπ ‚Äî‚Äî‚Äî
  if (len >= 26) {
    const shortMA     = avg(closes.slice(-5));
    const longMA      = avg(closes.slice(-25));
    const prevShortMA = avg(closes.slice(-6, -1));
    const prevLongMA  = avg(closes.slice(-26, -1));

    if (prevShortMA < prevLongMA && shortMA > longMA)
      score += settings.golden_cross_score;
    maxScore += Math.abs(settings.golden_cross_score);

    if (prevShortMA > prevLongMA && shortMA < longMA)
      score += settings.dead_cross_score;
    maxScore += Math.abs(settings.dead_cross_score);

    // ÁèæÂú®ÂÄ§ vs Èï∑ÊúüMA
    score += closes[len - 1] > longMA
      ? settings.price_above_ma_score
      : settings.price_below_ma_score;
    maxScore += Math.max(
      Math.abs(settings.price_above_ma_score),
      Math.abs(settings.price_below_ma_score)
    );
  }

  // ‚Äî‚Äî‚Äî ‰∏ÄÁõÆÂùáË°°Ë°® ‚Äî‚Äî‚Äî
  if (len >= 52) {
    const latest      = data[len - 1];
    const high9       = Math.max(...data.slice(-9).map(d => d.high));
    const low9        = Math.min(...data.slice(-9).map(d => d.low));
    const tenkan      = (high9 + low9) / 2;
    const high26      = Math.max(...data.slice(-26).map(d => d.high));
    const low26       = Math.min(...data.slice(-26).map(d => d.low));
    const kijun       = (high26 + low26) / 2;
    const senkouA     = (tenkan + kijun) / 2;
    const chikouClose = data[len - 26].close;

    score += tenkan > kijun
      ? settings.tenkan_kijun_score
      : -settings.tenkan_kijun_score;
    maxScore += Math.abs(settings.tenkan_kijun_score);

    score += latest.close > chikouClose
      ? settings.chikou_candle_score
      : -settings.chikou_candle_score;
    maxScore += Math.abs(settings.chikou_candle_score);

    score += latest.close > senkouA
      ? settings.price_above_kumo_score
      : -settings.price_above_kumo_score;
    maxScore += Math.abs(settings.price_above_kumo_score);
  }

  // ‚Äî‚Äî‚Äî „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ ‚Äî‚Äî‚Äî
  if (len >= 20) {
    const slice20 = data.slice(-20).map(d => d.close);
    const sma20   = avg(slice20);
    const stdDev  = Math.sqrt(
      slice20.reduce((sum, v) => sum + (v - sma20) ** 2, 0) /
      slice20.length
    );
    const upper = sma20 + 2 * stdDev;
    const lower = sma20 - 2 * stdDev;
    const last  = closes[len - 1];

    if (last > upper) score += settings.bb_break_upper_score;
    maxScore += Math.abs(settings.bb_break_upper_score);

    if (last < lower) score += settings.bb_break_lower_score;
    maxScore += Math.abs(settings.bb_break_lower_score);
  }

  // ‚Äî‚Äî‚Äî RSI ‚Äî‚Äî‚Äî
  if (len >= 15) {
    let gains = 0, losses = 0;
    for (let i = len - 14; i < len; i++) {
      const diff = closes[i] - closes[i - 1];
      if (diff > 0) gains += diff;
      else losses -= diff;
    }
    const avgGain = gains / 14;
    const avgLoss = losses / 14 || 1;
    const rs      = avgGain / avgLoss;
    const rsi     = 100 - (100 / (1 + rs));

    if (rsi > 70) score += settings.rsi_over70_score;
    maxScore += Math.abs(settings.rsi_over70_score);

    if (rsi < 30) score += settings.rsi_under30_score;
    maxScore += Math.abs(settings.rsi_under30_score);
  }

  // ‚Äî‚Äî‚Äî MACD ‚Äî‚Äî‚Äî
  if (len >= 35) {
    const ema12   = ema(closes, 12);
    const ema26   = ema(closes, 26);
    const macd    = ema12.map((v, i) => v - ema26[i]);
    const signal  = ema(macd.slice(-26), 9).slice(-1)[0];
    const macdVal = macd.slice(-1)[0];

    if (macdVal > signal) score += settings.macd_above_signal_score;
    else               score += settings.macd_below_signal_score;

    maxScore += Math.max(
      Math.abs(settings.macd_above_signal_score),
      Math.abs(settings.macd_below_signal_score)
    );
  }

  return { score, maxScore };
}


// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// „Åì„Åì„Åã„Çâ main() ‰ª•‰∏ã
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

let favorites = [];
let trendResults = [];
let sortDescending = true;
let userId = 0;

async function main() {
  console.log("‚ñ∂ main start");
  const files = [
    { name: "‰ªÆÂ§©Â†Ç", path: "json/‰ªÆÂ§©Â†Ç_mock_data.json" },
    { name: "„Ç´„É™„Çø", path: "json/„Ç´„É™„Çø_mock_data.json" },
    { name: "‰ªÆËè±UFJ", path: "json/‰ªÆËè±UFJ_mock_data.json" },
    { name: "„Ç´„É™„Éº", path: "json/„Ç´„É™„Éº_mock_data.json" },
    { name: "‰ªÆÁ´ã", path: "json/‰ªÆÁ´ã_mock_data.json" }
  ];

  // 1) „É¶„Éº„Ç∂„ÉºID
  const user = JSON.parse(localStorage.getItem("loggedInUser"));
  userId = user?.id || 0;
  console.log("   userId =", userId);

  // 2) „ÅäÊ∞ó„Å´ÂÖ•„Çä„Çª„ÇØ„Ç∑„Éß„É≥Ë°®Á§∫Âà∂Âæ°
  const favSection = document.getElementById('favoritesSection');
  if (favSection) {
    favSection.style.display = userId ? 'block' : 'none';
  }

  // 3) „Çπ„Ç≥„Ç¢Ë®≠ÂÆöÂèñÂæó
  let userScoreSettings = {};
  if (userId) {
    try {
      const res = await fetch(`/api/settings/${userId}`);
      userScoreSettings = await res.json();
      console.log("   settings from server:", userScoreSettings);
    } catch (err) {
      console.error("   „Çπ„Ç≥„Ç¢Ë®≠ÂÆöÂèñÂæóÂ§±Êïó:", err);
    }
  }
  // 4) default „ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
  const defaultSettings = {
    golden_cross_score: 10,
    dead_cross_score: -10,
    price_above_ma_score: 10,
    price_below_ma_score: -10,
    bb_break_upper_score: 10,
    bb_break_lower_score: -10,
    rsi_over70_score: -5,
    rsi_under30_score: 5,
    tenkan_kijun_score: 10,
    chikou_candle_score: 10,
    price_above_kumo_score: 10,
    macd_above_signal_score: 10,
    macd_below_signal_score: -10
  };
  userScoreSettings = { ...defaultSettings, ...userScoreSettings };
  console.log("   ‰ΩøÁî®„Åô„Çãsettings:", userScoreSettings);

  // 5) „Éà„É¨„É≥„Éâ„Åó„Åç„ÅÑÂÄ§ÂèñÂæó
  let thresholdSettings = { threshold_rising: 60, threshold_falling: 30 };
  if (userId) {
    try {
      const res = await fetch(`/api/trend-settings/${userId}`);
      if (res.ok) thresholdSettings = await res.json();
      console.log("   „Åó„Åç„ÅÑÂÄ§:", thresholdSettings);
    } catch (err) {
      console.error("   „Åó„Åç„ÅÑÂÄ§ÂèñÂæóÂ§±Êïó:", err);
    }
  }
  const { threshold_rising, threshold_falling } = thresholdSettings;

  // 6) „Éà„É¨„É≥„ÉâË®àÁÆó
  try {
    await Promise.all(files.map(async file => {
      const data = await fetch(file.path).then(r => r.json());
      const latest = data[data.length - 1];
      const { score, maxScore } = trendScore(data, userScoreSettings);
      const percent = maxScore > 0 ? Math.round((score / maxScore) * 100) : 0;
      trendResults.push({
        name: file.name,
        symbol: file.name,
        price: latest.close,
        percent,
        cellClass: percent >= threshold_rising ? 'high'
                  : percent <= threshold_falling ? 'low'
                  : 'neutral',
        trendIcon: percent >= threshold_rising ? 'üî∫ ‰∏äÊòá'
                  : percent <= threshold_falling ? 'üîª ‰∏ãÈôç'
                  : '‚è∏ Ê®™„Å∞„ÅÑ'
      });
    }));

    localStorage.setItem('trendResults', JSON.stringify(trendResults));
    console.log('‚ñ∂ trendResults „Çí localStorage „Å´Êõ∏„ÅçËæº„Åø„Åæ„Åó„Åü', trendResults);
  } catch (e) {
    console.error("   trendScoreÂë®„Çä„Åß„Ç®„É©„Éº:", e);
  }

  // 7) „ÅäÊ∞ó„Å´ÂÖ•„ÇäÂèñÂæó
  if (userId) {
    try {
      const favRes = await fetch(`/api/watchlist/${userId}`);
      favorites = favRes.ok ? await favRes.json() : [];
      console.log("   favorites:", favorites);
    } catch (e) {
      console.error("   „ÅäÊ∞ó„Å´ÂÖ•„ÇäÂèñÂæóÂ§±Êïó:", e);
      favorites = [];
    }
  }

  // 8) „É©„É≥„Ç≠„É≥„Ç∞ÊèèÁîª
  const rankingBody = document.getElementById('rankingTable');
  if (rankingBody) {
    renderRanking(trendResults);
  }

  // 9) ‰∏ÄË¶ßÊèèÁîª
  const tbody = document.getElementById('trendTable');
  if (tbody) {
    renderTable(trendResults, sortDescending);
    setupControls();
  } else {
    console.warn("   trendTable Áî®„ÅÆË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
  }
}

function renderTable(results, sortDesc) {
  const tbody = document.getElementById('trendTable');
  tbody.innerHTML = "";

  const searchValue = document.getElementById('searchInput')?.value.trim() || "";
  const trendFilter = document.getElementById('trendSelect')?.value || "all";
  const sorted = results
    .filter(item => {
      const matchName = item.name.includes(searchValue);
      const matchTrend =
        trendFilter === "all" ||
        (trendFilter === "up" && item.percent >= threshold_rising) ||
        (trendFilter === "down" && item.percent <= threshold_falling) ||
        (trendFilter === "flat" && item.percent > threshold_falling && item.percent < threshold_rising);
      return matchName && matchTrend;
    })
    .sort((a, b) => sortDesc ? b.percent - a.percent : a.percent - b.percent);

  sorted.forEach(result => {
    const isFav = favorites.some(f => f.symbol === result.name);
    const btnClass = isFav ? "favorite-btn favorited" : "favorite-btn";
    const btnText  = isFav ? "‚úî ÁôªÈå≤Ê∏à„Åø" : "‚òÖ ÁôªÈå≤";
    const needsLoginAttr = userId === 0 ? ' data-needs-login' : '';

    tbody.innerHTML += `
    <tr>
      <td>
        <a href="chart.html?symbol=${encodeURIComponent(result.name)}"
          class="link-underline">
          ${result.name}
        </a>
      </td>
      <td>${result.price.toFixed(2)}</td>
      <td class="score-cell ${result.cellClass}">${result.percent}ÁÇπ</td>
      <td>${result.trendIcon}</td>
      <td>
        <button
          class="${btnClass}"
          data-symbol="${result.name}"
          ${needsLoginAttr}
        >
          ${btnText}
        </button>
      </td>
    </tr>`;
  });

  const sortBtn = document.getElementById('sortToggle');
  if (sortBtn) {
    sortBtn.textContent = `„Çπ„Ç≥„Ç¢È†Ü„Å´‰∏¶„Å≥Êõø„ÅàÔºö${sortDesc ? "‚¨á ÈôçÈ†Ü" : "‚¨Ü ÊòáÈ†Ü"}`;
  }
}

function renderRanking(results) {
  const top3 = [...results].sort((a, b) => b.percent - a.percent).slice(0, 3);
  const tb = document.getElementById('rankingTable');
  tb.innerHTML = "";
  top3.forEach((item, i) => {
    tb.innerHTML += `
      <tr>
        <td>${i+1}‰Ωç</td>
        <td>${item.name}</td>
        <td>${item.percent}ÁÇπ</td>
      </tr>`;
  });
}

function setupControls() {
  document.getElementById('sortToggle')?.addEventListener('click', () => {
    sortDescending = !sortDescending;
    renderTable(trendResults, sortDescending);
  });
  document.getElementById('searchInput')?.addEventListener('input', () => {
    renderTable(trendResults, sortDescending);
  });
  document.getElementById('trendSelect')?.addEventListener('change', () => {
    renderTable(trendResults, sortDescending);
  });

  document.addEventListener("click", async e => {
    const btn = e.target.closest(".favorite-btn");
    if (!btn) return;
    if (btn.dataset.needsLogin !== undefined) {
      window.location.href = "Login.html?reason=watchlist";
      return;
    }
    const symbol = btn.dataset.symbol;
    const isFav  = btn.classList.contains("favorited");
    try {
      let res;
      if (isFav) {
        res = await fetch(`/api/watchlist/${userId}/${symbol}`, { method: "DELETE" });
      } else {
        res = await fetch(`/api/watchlist/${userId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId, symbol })
        });
      }
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      if (isFav) favorites = favorites.filter(f => f.symbol !== symbol);
      else favorites.push({ symbol });
      renderTable(trendResults, sortDescending);
    } catch (err) {
      console.error(err);
      alert(isFav ? "Ëß£Èô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" : "ÁôªÈå≤„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
    }
  });
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', main);
} else {
  main();
}




